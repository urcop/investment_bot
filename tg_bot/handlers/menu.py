from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery

from tg_bot.keyboards.inline.profile import status_keyboard, status_callback
from tg_bot.keyboards.inline.status import status_choice_keyboard, status_choice_callback, selection_selected_status, \
    select_selected_status


async def generate_profile_text(id: int, username: str):
    text = f"""
üîë ID: {id}
üë§ –ù–∏–∫–Ω–µ–π–º: {f'@{username}' if username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
‚è∞ –°—Ç–∞—Ç—É—Å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        """
    return text


async def generate_status_text(status: str):
    text = []
    if status == 'vip':
        text = ['–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å 3 —Å–ª–æ—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.',
                '–ú–µ—Å—è—Ü <strong>100 —Ä—É–± / 50 –≥—Ä–Ω</strong>',
                '3 –º–µ—Å—è—Ü–∞ <strong>250 —Ä—É–± / 125 –≥—Ä–Ω.</strong>']
    elif status == 'premium':
        text = ['–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å 15 —Å–ª–æ—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.',
                '–ú–µ—Å—è—Ü <strong>500 —Ä—É–± / 250 –≥—Ä–Ω</strong>',
                '3 –º–µ—Å—è—Ü–∞ <strong>1200 —Ä—É–± / 600 –≥—Ä–Ω.</strong>']
    return '\n'.join(text)


async def bag(message: types.Message):
    ...


async def support(message: types.Message):
    text = [
        '–°–æ–æ–±—â–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ - @karpevg'
    ]
    await message.answer('\n'.join(text))


async def profile(message: types.Message):
    id = message.from_user.id
    username = message.from_user.username
    text = await generate_profile_text(id=id, username=username)
    await message.answer(text, reply_markup=status_keyboard)


async def status(call: CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: '
    await call.message.edit_text(text, reply_markup=status_choice_keyboard)


async def status_choice(call: CallbackQuery, callback_data: dict):
    id = call.from_user.id
    username = call.from_user.username
    choice = callback_data['status']
    if choice == 'back':
        text = await generate_profile_text(id=id, username=username)
        keyboard = status_keyboard
    else:
        text = await generate_status_text(choice)
        keyboard = await selection_selected_status(choice)
    await call.message.edit_text(text, reply_markup=keyboard)


async def selected_status_choice(call: CallbackQuery, callback_data: dict):
    choice = callback_data['action']
    if choice == 'back':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: '
        keyboard = status_choice_keyboard
        await call.message.edit_text(text, reply_markup=keyboard)
    else:
        status = callback_data['status']
        await call.message.answer(status)


def register_menu(dp: Dispatcher):
    dp.register_message_handler(bag, text='–ü–æ—Ä—Ç—Ñ–µ–ª—å üíº')
    dp.register_message_handler(support, text='–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§')
    dp.register_message_handler(profile, text='–ü—Ä–æ—Ñ–∏–ª—å üìù')
    dp.register_callback_query_handler(status, status_callback.filter())
    dp.register_callback_query_handler(status_choice, status_choice_callback.filter())
    dp.register_callback_query_handler(selected_status_choice, select_selected_status.filter())
